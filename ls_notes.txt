| |     /    ||  |  ||    \   /  ]|  |  |    
| |    |  o  ||  |  ||  _  | /  / |  |  |    
| |___ |     ||  |  ||  |  |/  /  |  _  |    
|     ||  _  ||  :  ||  |  /   \_ |  |  |    
|     ||  |  ||     ||  |  \     ||  |  |    
|_____||__|__| \__,_||__|__|\____||__|__|    
                                             
  _____   __  __ __   ___    ___   _         
 / ___/  /  ]|  |  | /   \  /   \ | |        
(   \_  /  / |  |  ||     ||     || |        
 \__  |/  /  |  _  ||  O  ||  O  || |___     
 /  \ /   \_ |  |  ||     ||     ||     |    
 \    \     ||  |  ||     ||     ||     |    
  \___|\____||__|__| \___/  \___/ |_____|    
                                             
 ____    ___   ______    ___  _____          
|    \  /   \ |      |  /  _]/ ___/          
|  _  ||     ||      | /  [_(   \_           
|  |  ||  O  ||_|  |_||    _]\__  |          
|  |  ||     |  |  |  |   [_ /  \ |          
|  |  ||     |  |  |  |     |\    |          
|__|__| \___/   |__|  |_____| \___|          
                                      
-------
Reading
---------
* The Two-Layer Problem:  https://medium.com/launch-school/the-two-layer-problem-915b7587654c
* Markdown:  https://github.github.com/gfm/


----------------
Problem-solving:  PEDAC
-----------------------
https://medium.com/launch-school/solving-coding-problems-with-pedac-29141331f93f


  PEDAC
  Objective	             Step	                     Description
  -----------            --------                   -----------------
  Process the Problem	   Understand the Problem	   Identify expected input and output
                                                    Make the requirements explicit
                                                    Identify rules
                                                    Mental model of the problem (optional)
                         Examples/Test Case	       Validate understanding of the problem
                         Data Structure	           How we represent data that we will work with when converting the input to output.
                         Algorithm	               Steps for converting input to output
  Code with Intent	     Code	                     Implementation of Algorithm





-------------------
Exercises: Small Problems
--------------------------
While you're working through this course, you should concurrently work through the "Small Problems" exercises from the Exercises tab. We recommend that you do 20 exercises (or 2 sets) after each lesson (no need to complete the Advanced exercises set). At the assessment, you'll see instructions for completing all of the Small Problems exercises, so doing 20 after each lesson will help spread that work out a little bit.

The Small Problems should take around 10-30 minutes to complete, and some of them may even take a significantly longer period of time. You may want to space out the 20 exercises, tackling a couple per day.

Before working on the Small Problems, take the time to read through our blog article about The Two-Layer Problem. This article addresses the challenge of solving a problem while simultaneously learning a new programming language.

You'll also find that you may want to do these exercises multiple times to explore their depth and to truly allow the exercise to sink in.

Small Problems Exercises



-----------------------------------------
Working with RB101-RB109 Small Problems Exercises
-------------------------------------------------
The Small Problems exercises are a set of programming problems that help students in course RB101 gain Ruby fluency and practice their programming skills. It also helps them prepare for the assessments. These exercises should give you lots of practice in solving small programming problems in any programming language.

Difficulty Levels
-----------------
The problems are classified as Easy, Medium, and Advanced. These classifications are somewhat fluid, though, which means that some exercises may seem easier or harder than you might expect. To pass the assessment, you should be able to solve problems that have a difficulty level similar to those in the Medium groups. For complete mastery, you should be able to handle most of the Advanced level exercises, though you won't find anything of that level on the assessment.

Ideally, you should be able to solve most Easy exercises without leaning too heavily on the Ruby documentation. That doesn't mean that you shouldn't use it; however, you should be familiar enough with Ruby's syntax, conditionals, loops, method definitions, and so on, that you don't need it. You should also be familiar with the fundamental data types and the most often-used methods. If you need to look up information too often, you may spend more time reading than you do writing code. Keep practicing until you build up some "muscle memory."

Expect to spend more time with the documentation when you get to the Medium and Advanced level exercises. When you get to this stage, you will be pushing the boundaries of your knowledge, and a little light reading will help you over them into the next level.

Some exercises (chiefly those in the Medium and Advanced groups) introduce new topics that we don't discuss in the course material. That can make some problems seem much harder than they are. That's intentional: the inclusion of such exercises teaches you how to find information on your own. Feel free to use the documentation and your favorite search engine. If the problem is still too hard, don't worry; study the solution and discussion, then come back to it later.

Solving Problems
-----------------
Before you attempt to work any of these exercises, take a few hours to watch and study our Problem Solving videos. These videos walk you through the various steps of solving problems of different kinds. Take notes, and use those notes as you work through the exercises to:

Understand the problem
-----------------------
* Set up your test cases
* Describe your inputs, outputs, and data structures
* Describe your algorithm
* Begin coding

Use these steps for every problem, even if it seems too simple. Don't attempt to hack and slash your way through a program; you can get away with doing that with simple problems, but with every small increase in complexity, the harder it is to hack-and-slash your way to a solution, so code with intent every time. You'll know you're doing it right when you spend more time getting ready to code than you spend coding. (That won't be true all the time, but, when your preparation is thorough, the code almost writes itself.)

Knowing how to solve computing problems and practicing those techniques will take you a long way.

Exercise Tips
---------------
* Put your solutions in separate files, and push them to GitHub for future reference.
* Work the problems in the order presented.
* Keep track of which exercises give you difficulty or that you have trouble understanding.
* If necessary, go back to the Ruby Basics Exercises and work the appropriate exercises first.
* Code with intent (see the problem-solving videos again)
* Use the problem-solving techniques described in the videos.
* Don't method hunt. Method hunting is searching for the perfect pre-built method to do what you need.
* Don't be afraid to use basic looping mechanisms like loop and while.
* After you have code that works, you can think about simplifying it. However, that isn't the point of these exercises. It is good practice if you're up to the challenge, though.
* If something doesn't work right:
  * Think about why it doesn't work.
  * Study any error messages you receive.
  * Use irb or pry to explore what's happening.
  * Don't try something else and hope it works; think about what needs to change, then change it.
* If you can't solve a problem at first, take a break and come back to it later.
* If you can't solve the problem after a pause, take a quick look behind the Solution button.
* If there is an Approach/Algorithm section, read it and then try the problem again.
* Take a quick look at the answer to get a general feel for what it does, then try again.
* Read the Discussion section and study the solution until you feel you understand it.
* Type the presented code in and run it. Use irb or pry or some puts statements to study how it works.
* Close the solution and try to build your own without referring back to ours.

* Once you have a working program, compare it to our solution and discussion.
* Don't worry if our solution looks different from yours.
* Ask yourself, what does our solution do differently than yours?
* Why do you think we did it the way we did it?
* Does your program miss some of the "edge cases"?

* In some cases, we show short, concise solutions; many are "one-liners." You are not expected to come up with such succinct code yourself, so don't feel intimidated or discouraged if your solution is considerably longer. That's normal and expected.
* Focus on writing code that is clear to you.
* Strive to understand our "one-liner" solutions, but your answer doesn't need to look like them. Some of our solutions are hard to follow at this stage, but they introduce useful techniques and methods for the future.
* A lot of Ruby programmers write code in this compact manner, or worse, so you must learn to at least read it.
* Compare your solution with solutions posted by other students.
* See if you can use those solutions to make your code easier to understand.
* See something interesting? Read about it in the documentation.
* Post your answer if it differs notably from other solutions.
* After working through the exercises, go back to those that gave you difficulty. Keep going back until you believe you understand both the problem and the solution.

* The Further Exploration sections try to make you think about the exercise from a different perspective. Some of these Further Explorations are at the same difficulty level as the original, but some are considerably harder.
* Don't attempt the Further Explorations until you fully understand the original problem.
* Do try the Further Explorations once you fully understand the original. These problems are optional but recommended to improve your skills.
* Don't worry if you can't solve the Further Explorations! These problems are more about thinking than about writing code; that is why we don't supply solutions.
* Feel free to post your Further Exploration solutions with the other exercise solutions (make sure you identify it as a Further Exploration solution).
* Feel free to open a regular Forum post about a Further Exploration to discuss it (but try to avoid posting answers!)



------------------
Code Review Guidelines
-------------------------
Upon completing a course project, you are welcome to request a code review in the lesson's discussion forum. Code reviews are a great way to receive valuable feedback and improve your code.

Guidelines
----------
Some projects will also specify optional 'bonus features' that you are encouraged to implement. You may choose to request a code review either before or after completing the 'bonus features' portion of a project, but we are only able to support one code review per project.

Sometimes students will request that we look at code again after corrections or updates after the initial code review. While this is ok, we will not do another code review and only take a quick look.

We cannot perform code reviews on material external to Launch School. We also cannot do code reviews on materials that's within Launch School but not assignments, such as exercises or optional content. The exercises and optional content is for you to gain more practice, and we can't perform code reviews on those.

"Language Check" requests: we cannot do reviews of language checks. This typically happens more in 109 and 129 when students are starting to study for the assessment and want to verify if the way they're describing code is appropriate. Unfortunately, we cannot review these, as it would be akin to grading an essay before submission of the essay.

Tips for Success
------------------
If you are struggling to debug a particular piece of code or understand a course concept, don't wait until you are submitting a code review of your whole project to ask for help-- go ahead and create a post for that issue in the lesson forum. This allows us to focus in on your question and address it specifically. It also makes it easier for other students with the same question to find your post.

Asking good questions is essential to mastery based learning; good questions should be specific. If you are having trouble debugging a piece of code, include a link to the GitHub repository or gist where we can view your code. Identify the issue with as much precision as possible and provide details about how you have tested the problem already. If you are using Ruby, for example, Pry, IRB, and the Ruby documentation are helpful tools for debugging and testing programming concepts.

Reading code is an important skill. Feel free to spend time reading through other code reviews in the lesson forums.

Before submitting a code review request for a project, be sure that your program runs without error and is as close to a 'final product' as possible. This helps our staff give you focused and useful feedback. If you are using Ruby, run your code through Rubocop and do your best to address any complaints.



---------
Quiz Guide
------------
Quizzes are auto-graded checkpoints that test your knowledge of the current lesson. Its goal is to allow you to check your understanding of the topics in the current lesson without any consequences attached to your performance. It is solely for your own benefit.

Given this, please take note of the following when working through a quiz:

You will get a grade, but it won't be used to assess you in a formal capacity.
It is open notes. It's encouraged to review previous material to make sure you understand the points of emphasis on the quiz.
It is not timed. Do not rush through answering a question. Take as much time as you need to work through quizzes. Many quiz questions are very nuanced and contain subtle, but important, edge cases to consider.
There are no partial points, since everything in quizzes is auto-graded.
Its focus is on the topics covered in the current lesson. However, some questions will cover topics from an earlier lesson.
Quizzes are blocking. You have to take them to get to the next assignment/lesson.

F.A.Q.
-------
Can I retake quizzes?
Right now, you can't. You may go over your quiz, but you can't answer it again.

What happens if I score low on quizzes?
Officially, nothing will happen. It doesn't affect your progress in the Launch School curriculum. Consistent low scores, however, may imply that you must review some materials more carefully.

Where can I view my quiz scores?
You can view your quiz scores from My Assessments > Quizzes from the side navigation.

What if I think a quiz answer is wrong or ambiguous?
Please submit feedback together with the supporting reason why you think the answer is wrong. We will work quickly to correct it.

Is it ok to talk about quizzes in Slack? Or in the lesson discussion?
Yes, though it is recommended that you talk about it in the lesson discussion. It gives everyone a chance to see the discussion, and also more room to warn others that there are possible "spoilers" in the post as compared to Slack.

Are my answers saved if I accidentally exit the browser while taking a quiz?
The answers you've clicked "saved" on are stored. You can go back to the quiz by going to My Assessments > Quizzes. On the quizzes tab, you'll find the quiz you haven't finished to have a status of "Awaiting Answers." This is similar to how real assessment exams work.

Can I skip quizzes?
No, you can't. You have to complete the quiz before you can proceed to the next assignment/lesson.
